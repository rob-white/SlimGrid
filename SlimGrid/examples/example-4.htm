<!DOCTYPE html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
    <title>SlimGrid Example 4</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap themed site -->
    <link href="../css/bootstrap/bootstrap.min.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/bootstrap/bootstrap-responsive.min.css?v=1.0" rel="stylesheet" type="text/css"/>

    <!-- CSS required for Slickgrid -->
    <link href="../css/slickgrid/slick.grid.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/jquery/smoothness/jquery-ui-1.10.3.custom.min.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/slick.pager.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/slick.columnpicker.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/slick.headerbuttons.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/slick.headermenu.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/slick-default-theme.css?v=1.0" rel="stylesheet" type="text/css"/>
    <link href="../css/slickgrid/plugins-common.css?v=1.0" rel="stylesheet" type="text/css"/>

    <style type="text/css">
        .special-cell {
            height: 100%;
            display: block;
            padding: 0px;
            font-weight: bold;
            vertical-align: baseline;
            white-space: nowrap;
            padding-left: 2px;
            padding-right: 2px;
        }

        #tab-container {
            margin-top: 80px;
        }

        .query-settings {
            margin-bottom: 10px;
        }

        .cell-title {
            font-weight: bold;
        }

        .cell-effort-driven {
            text-align: center;
        }

        .toggle {
            height: 9px;
            width: 9px;
            display: inline-block;
        }

        .toggle.expand {
            background: url(../css/slickgrid/images/expand.gif) no-repeat center center;
        }

        .toggle.collapse {
            background: url(../css/slickgrid/images/collapse.gif) no-repeat center center;
        }
    </style>
</head><!--/head -->

<html lang="en-us">
<body>
<div id="tab-container" class="container-fluid">
    <ul class="nav nav-tabs" id="tabs">
        <li id="example-4-tab">
            <a href="#example-4" data-toggle="tab">Example 4</a>
        </li>
    </ul>
    <!--/#tabs -->
    <div class="tab-content">
        <div class="tab-pane" id="example-4">
            <form class="query-settings form-inline">
                <button id="example-4-query-btn" type="submit" class="btn">Refresh Data</button>
            </form>
            <div class="row-fluid">
                <div id="example-4-table" class="span7"></div>
                <div class="span5">
                    <h3 class="text-center">Overview</h3>
                    <hr/>
                    <a href="https://github.com/rob-white/SlimGrid/blob/master/SlimGrid/examples/example-4.htm">Source Code on Github</a>
                    <hr/>
                    <ul>
                        <li>Expand/Collapse tree functionality</li>
                        <li><a href="http://mleibman.github.io/SlickGrid/examples/example5-collapsing.html">SlickGrid example that was used as a reference</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!--/#example-4 -->
    </div>
    <!--/.tab-content -->
</div>
<!--/.tab-content -->

<!-- jQuery scripts -->
<script src="../js/jquery/jquery-1.9.1.js?v=1.0" type="text/javascript"></script>
<script src="../js/jquery/jquery-ui-1.10.3.custom.min.js?v=1.0" type="text/javascript"></script>
<script src="../js/jquery/jquery.event.drop-2.2.js?v=1.0" type="text/javascript"></script>
<script src="../js/jquery/jquery.event.drag-2.2.js?v=1.0" type="text/javascript"></script>

<!-- Only used for creating a fake jQuery ajax request -->
<script src="js/ajax.fake.js" type="text/javascript"></script>
<script src="js/webservices.fake.js" type="text/javascript"></script>
<!-- Bootstrap scripts -->
<script src="../js/bootstrap/bootstrap.min.js?v=1.0" type="text/javascript"></script>

<!-- Slickgrid scripts -->
<script src="../js/slickgrid/slick.core.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.grid.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.formatters.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.dataview.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.pager.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.groupitemmetadataprovider.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.cellrangedecorator.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.cellrangeselector.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.cellselectionmodel.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.rowselectionmodel.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.columnpicker.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slickgrid.headerfilter.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.cellexternalcopymanager.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.checkboxselectcolumn.js?v=1.0" type="text/javascript"></script>
<script src="../js/slickgrid/slick.editors.js?v=1.0" type="text/javascript"></script>

<!-- SlimGrid dependency (will be removed in future update)-->
<script src="../js/underscore/underscore.js?v=1.0" type="text/javascript"></script>

<!-- SlimGrid wrapper for SlickGrid creation -->
<script src="../slim.grid.js?v=1.0" type="text/javascript"></script>

<script type="text/javascript">
    // Example 3
    $(document).ready(function () {
        // When jQuery's ready, initialize the example and show the tab
        var example = Example().init().show();

        $(window).on('resize', function(){
            example.resize();
        });
    });

    function Example() {

        var $el = {
            tab: $('#example-4-tab a'),
            queryBtn: $('#example-4-query-btn'),
            gridContainer: $('#example-4-table')
        },
        gridHeight = 400,
        grid = SlimGrid();

        // Constructor
        function page() { }

        // ----- Public -----
        page.init = function () {
            enablePageLoading();

            // Create a SlimGrid with options and formatting
            grid.container($el.gridContainer)
                .selectionModel(new Slick.CellSelectionModel)
                .gridOptions({
                    // SlickGrid
                    defaultColumnWidth: 230,
                    forceFitColumns: false,
                    multiSelect: true,

                    // SlimGrid
                    height: gridHeight,
                    copyOut: true,
                    autoIncrement: true, // Since the data set we're pulling doesn't have a unique key, auto generate one
                    downloadable: true,
                    showColumnPicker: true,
                    showHeaderFilter: true,
                    ajaxOptions: {
                        url: "http://example.url.com/example4.json",
                        type: "GET",
                        fake: true,
                        async: true,
                        datatype: "jsonp"
                    }
                })
                .columnOptions(function (key, column) {
                    var theGrid = this; // Get the SlimGrid
                    column['formatter'] = function (row, cell, value, columnDef, dataContext) {
                        // If we're looking at the player column
                        // lets add our grouping stuff
                        if(key == 'player') {
                            var data = theGrid.getData();
                            var dataview = theGrid.dataview();

                            value = value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            var spacer = "<span style='display:inline-block;height:1px;width:" + (15 * dataContext["indent"]) + "px'></span>";
                            var idx = dataview.getIdxById(dataContext['id']);

                            if (data[idx + 1] && data[idx + 1]['indent'] > data[idx]['indent']) {
                                if (dataContext['_collapsed']) {
                                    return spacer + " <span class='toggle expand'></span>&nbsp;" + value;
                                }
                                else {
                                    return spacer + " <span class='toggle collapse'></span>&nbsp;" + value;
                                }
                            } else {
                                return spacer + " <span class='toggle'></span>&nbsp;" + value;
                            }
                        }
                        else{
                            // Otherwise, just do our other formatting
                            if (value == 'Female') {
                                return "<span class=\"special-cell\" style='background-color: rgb(39, 41, 214); color: #FFF'>" + value + "</span>";
                            }

                            if (value == 'Male') {
                                return "<span class=\"special-cell\" style='background-color: rgb(214, 10, 16); color: #FFF'>" + value + "</span>";
                            }

                            if (columnDef['id'] == 'score') {
                                return "<span>" + value + " pts</span>";
                            }
                        }

                        return value;
                    };

                    // Add column options based on column key
                    if (key == 'unneeded_column' || key == 'indent' || key == 'parent')
                        column['hidden'] = true;    // Hide columns
                    if (key == 'score')
                        column['width'] = 400;      // Set width of score column to 400px

                    return column;
                })
                .filter(function (item){
                    var data = this.getData();
                    if (item['parent'] != null) {
                        var parent = data[item['parent']];
                        while (parent) {
                            if (parent['_collapsed']) {
                                return false;
                            }
                            parent = data[parent['parent']];
                        }
                    }

                    return true;
                })
                .events(function(events){

                    events.onClick = function (e, args){
                        var theGrid = this;
                        if ($(e.target).hasClass("toggle")) {
                            var dataview = theGrid.dataview();
                            var item = dataview.getItem(args.row);
                            if (item) {
                                if (!item['_collapsed']) {
                                    item['_collapsed'] = true;
                                }
                                else {
                                    item['_collapsed'] = false;
                                }
                                dataview.updateItem(item['id'], item);
                            }
                            e.stopImmediatePropagation();
                        }
                    };

                    // Called after the grid is rendered on screen
                    events.afterRender = function (data){
                        disablePageLoading();
                    };

                    return events;
                })
                .render();

            // Allow buttons to respond to on-click event
            $el.queryBtn.on('click', function (e) {
                e.preventDefault();
                queryData();
            });

            // When this tab is shown to the user,
            // run resize for page elements
            $el.tab.on('shown', function (e) {
                resizePageElements();
            });

            return page;
        };

        // Show the tab if it's not currently selected
        page.show = function () {
            $el.tab.tab('show');
            return page;
        }

        page.resize = function () {
            resizePageElements();
            return page;
        };

        // ----- Private functions -----
        // Set the page to "loading" state (user can't click on anything)
        function enablePageLoading() {
            $el.queryBtn.prop('disabled', true).text('Loading...').blur();
        }

        // Remove "loading" state from the page (user now allowed to interact with stuff)
        function disablePageLoading() {
            $el.queryBtn.prop('disabled', false).text('Refresh Data');
        }

        function queryData() {
            // Render the grid. If it already exists,
            // just update the data/columns in the grid.
            enablePageLoading();
            grid.render();
        }

        function resizePageElements() {
            // Calls SlickGrid resize functions
            grid.resize();
        }

        return page;
    }

</script>
</body><!--/body -->
</html><!--/html -->
